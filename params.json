{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### Welcome to the Scala ORP Project.\r\nThis Project extends the [Scala Programming Language](http://www.scala-lang.org) with _Object-Relational Programming_ (ORP). It was developed as part of a [Master's thesis](http://www.fernuni-hagen.de/ps/arbeiten/olofsson.shtml) (available in German only) at the FernUniversitÃ¤t in Hagen. Most of the research papers are also written in German:\r\n\r\n* [_\"Wie die Objektorientierung relationaler werden sollte: Eine Analyse aus Sicht der Datenmodellierung\"_](http://www.fernuni-hagen.de/ps/veroeffentlichungen/Mod2010.shtml)\r\n* [_\"Objektrelationale Programmierung\"_](http://www.fernuni-hagen.de/ps/veroeffentlichungen/SE2010.shtml)\r\n\r\n[_\"Towards Object-Relational Programming\"_](https://powerjava.googlecode.com/files/10152.SteimannFriedrich.Paper.pdf) is written in English and explains the basic ideas:\r\n> While the relational data model and its commercial implementations have undergone considerable extensions to become object-relational, comparable advances from mainstream object-oriented programming languages seem to be rare. Complementing recent efforts to integrate SQL-like querying of memory-based collections into languages such as C# and Java, we specify a gentle extension of the object-oriented programming model with bidirectional relationships that are uniform across all uses. To substantiate our object-relational programming model, we sketch two concrete implementations, one in Smalltalk and one in Scala. Perhaps most remarkable is the fact that our extension of objects does not introduce relationships as a first class language construct.\r\n\r\nThis Project implements an annotation-based extension of Scala, that uses a Compiler Plugin to transform the Source Code. The API is straightforward and explained below.\r\n\r\n### API and Usage\r\nThe [ORP API](https://github.com/simono/scala-orp/blob/master/orp-framework/src/main/scala/orp/api.scala) defines four Annotations (Types omitted for brevity):\r\n\r\n* `@relationship`: Marks an `object` as Relationship with two Roles\r\n* `@role(multiplicity = Many)`: A Role in a Relationship, with Multiplicity `One` or `Many` (the default)\r\n* `@plays(roles*)`: A Class can play one or more Roles\r\n* `@playsFor(role, forClass)`: In some cases a Class plays a Role only for _one_ other Class\r\n\r\nA Role can be selected with `role[T]`, just like you select classes with `classOf[T]`.\r\n\r\n#### Example for plays\r\nThe following defines a bidirectional, one-to-many relationship between a Customer and his Contracts:\r\n```scala\r\nimport orp.api._\r\n\r\n@relationship\r\nobject CustomerContract {\r\n  @role(One) trait Customer\r\n  @role trait Contract\r\n}\r\n```\r\nNow the Class `MyCustomer` plays the Role `Customer` and the Class `MyContract` plays `Contract`:\r\n```scala\r\nimport orp.api._\r\n\r\n@plays(role[CustomerContract.Customer])\r\nclass MyCustomer\r\n\r\n@plays(role[CustomerContract.Contract])\r\nclass MyContract\r\n```\r\nYou can use the classes like this:\r\n```scala\r\n  val customer = new MyCustomer\r\n  val contract = new MyContract\r\n\r\n  customer.addContract(contract)\r\n  assert(1 == customer.getContracts.size)\r\n  customer.removeContract(contract)\r\n  assert(customer.getContracts.isEmpty)\r\n```\r\n\r\n#### Example for playsFor\r\nTo define a part-whole relationship with additional methods:\r\n```scala\r\nimport orp.api._\r\n\r\n@relationship\r\nobject PartWhole {\r\n\r\n  @role trait Part {\r\n    def belongsTo(whole : Whole) = partOf(whole, this)\r\n  }\r\n\r\n  @role(One) trait Whole {\r\n    def contains(part : Part) = partOf(this, part)\r\n  }\r\n\r\n  def partOf(whole : Whole, part : Part) = whole.getParts.contains(part)\r\n}\r\n```\r\nThis relationship is very wide, a Class that plays `Part` is typically playing this for another Class. A `Car` could play the `Whole` Role, but not for every `Part`, just for Parts of Class `Engine`. This is where the playsFor-annotation is needed. `Engine` plays `Part` for `Car` and `Car` plays `Whole` for `Engine`:\r\n```scala\r\nimport orp.api._\r\n\r\n@playsFor(role[PartWhole.Part], classOf[Car])\r\nclass Engine\r\n@playsFor(role[PartWhole.Whole], classOf[Engine])\r\nclass Car\r\n\r\n@plays(role[PartWhole.Part])\r\nclass OtherPart\r\n```\r\nNow you can only add Engines to a Car:\r\n```scala\r\nnew Car().addPart(new Engine) // Works\r\nnew Car().addPart(new OtherPart) // Doesn't Work\r\n```\r\n\r\n### Authors and License\r\nThis project is maintained by @simono and licensed under the Apache 2 license. For Setup instructions and License details, see the [Project page](https://github.com/simono/scala-orp). If you have any questions or comments, please contact @simono.","name":"Scala ORP","tagline":"Object-Relational Programming in Scala","google":""}